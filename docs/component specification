1. Software components: simulator()

Description:
The simulator() function serves as the core of the Turing Pattern Simulator. It implements the Gray-Scott reaction-diffusion model to generate patterns based on user-defined parameters. The component allows output in multiple formats (e.g., GIF, PNG) and supports optional noise addition to simulate natural variability.

Inputs:
Reaction parameters: F, k (must be input)
Diffusion coefficients: D_u, D_v (have default value)
​Simulation settings: grid_size, time_steps (have default value)
Noise settings: add_noise (True or False), noise_U_to_V, noise_V_to_U (have default value)
Output settings: output_type (PNG or GIF), frame_interval and fps (only for gif), filename

Outputs:

Visual representation of the simulated Turing pattern:
PNG file(s) for static snapshots.
GIF for dynamic visualizations of pattern evolution.

Role:
This component provides users with a tool to study specific parameters and visualize the resulting patterns.

2. 1D Parameter Sweeper: sweeper_1d()

Description:
The sweeper_1d() function automates the simulation process over a single parameter range. It generates individual pattern visualizations for each parameter value and present the results into a matrix plot.

Inputs:

Parameter name and range: param_name, param_range (start, stop, step)
Simulator arguments: A dictionary of all fixed parameters passed to the simulator() function.
Output settings: output_dir

Outputs:

A folder containing individual PNGs for each parameter value.
A single matrix visualization

Role:
This component makes users to explore the effect of a single parameter and compare results.

3. 2D Parameter Sweeper: The sweeper_2d()

Description:
The sweeper_2d() function allows dual-parameter sweeps such as F and k, to study their combined effects on Turing patterns. Results are organized into a grid-like matrix, with axes representing the two parameters.

Inputs:

Parameter names and ranges: param_x_name, param_x_range, param_y_name, param_y_range
Simulator arguments: A dictionary of all fixed parameters passed to the simulator() function.
Output settings: output_dir

Outputs:

A folder containing individual PNGs for each parameter value combination.
A single matrix PNG visualization, where each cell represents the Turing pattern for a specific parameter pair.


Interactions to accomplish use cases:
•	Use case: a development biologist observed a turing pattern and wants to sweep a relatively precise range of the parameter so that they can do experiment to verify the real parameter and learn the underlying function.
• In this use case, in a python environment like jupyter notebook. They need to import the package:
      from Turing_Pattern_Simulator import sweeper_1d
After that, they need to type the parameter they want to sweep and the parameter range (start, stop, step) as followed. Then they should fill in the paramter they know and output pathway. As followed:
      sweeper_1d(param_name='F', param_range=(0.02, 0.07, 0.01), simulator_args={'k': 0.06,'D_u': 0.16,'D_v': 0.08},output_dir="1d_F_sweep")
Then, just run it and wait for about 30s, they will have a folder '1d_F_sweep'. And on the folder, they have a series of figures with different F value and a matirx with all the figures on. Thereby they can check which paramters generated the pattern. 

preliminary project plan

Week 1 - write the reaction-diffusion model and write the input part and output part(pattern images)
Week 2 - write the parameter sweep part
Week 3 - submit it into pypi, test the model in some real situations or try some real data from wet lab experiments.
