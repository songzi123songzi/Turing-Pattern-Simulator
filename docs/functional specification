This model is used for simulating Turing pattern by reaction diffusion model.

A Turing pattern is a spatially organized, stable pattern that emerges from the interaction between two or more chemical species undergoing reaction and diffusion. It was first described by Alan Turing in his 1952 paper on morphogenesis. The system typically involves an activator and an inhibitor, where:
1. Activator promotes both its own production and that of the inhibitor.
2. Inhibitor suppresses the activator's production.
3. Diffusion plays a key role: the inhibitor diffuses faster than the activator, leading to localized concentrations of the activator.
Mathematically, Turing patterns emerge when specific parameter conditions cause the homogeneous steady state of the reaction-diffusion system to become unstable, giving rise to periodic spatial patterns.

The Turing model appears in chemical reactions, in the formation and development of biological forms. Understanding the Turing model is important for understanding biomolecular interactions, biological development, the construction of self-forming systems, and systems biology.

Users

1. Biologist - in morphogenesis, development, ecology and pattern formation. By adjusting the parameters of the model, they can simulate different biological patterns to better understand the formation mechanism of zebra stripes, spots, fish scales, bacteria population and other patterns.
2. Materials chemist - learn patterns formed in different materials or chemical environments to provide guidance for material design and chemical reactions
3. Computational and system biologist - learn basic parameters in pattern formation and how to form a specific pattern as nature.
4. Artist - generate nature-inspired design from a Turing pattern


what information users want from the system 

1. Visual Representation of Patterns: Users want to see the Turing patterns generated from specific reaction-diffusion parameters. They expect the tool to provide clear and accurate visualizations of the spatial patterns based on their inputs.
2. Parameter Sweep and Pattern Exploration Results: For exploring a range of parameter values, users want to know the patterns for each combination. This makes them to identify parameter sets that lead to particular patterns or behaviors, such as stability, oscillations, or spatial complexity.


Use cases 
1. Simulating Turing patterns with some of synthetic biology genetic circuits
Objective: a synthetic biologist wants to build a pattern by some genetic circuits, (such as using quorum sensing system to generate a Turing pattern on bacteria colony on a plate). They have parameters of parts on genetic circuits. So before experiment,
they want to see in silico, if their circuits can generate Turing patterns using this package.

Steps
    (1. Input Parameters: The user enters parameter
    (2. Run Simulation: The user executes the simulation with the entered parameters. For example, use the script as followed
        from Turing_Pattern_Simulator import simulator
        simulator(k=0.057,F=0.029,output_type="gif",filename="maze w noise",time_steps= 3000 ,add_noise=True)
    (3. Pattern Visualization: The system displays the final pattern using a 2D plot, allowing users to observe the generated Turing pattern.

2. Sweeping the parameter on cellular differentiation
Objective: a development biologist observed a turing pattern on a cell differentiation process in a organ building. After a lot of experiments, They know the removel rate (k) of the differentiated cells (V), 
but don't know the feed rate (F) of stem cell. They want to get a relatively precise range of the parameter so that they can do experiment to verify the real parameter and learn the underlying function.

Steps
    (1. Input Parameters: The user enters parameter they know and the parameter they want to sweep, the range, step they want to use.
    (2. Run Simulation: The user executes the sweep with the entered parameters. For example, use the script as followed
        from Turing_Pattern_Simulator import sweeper_1d
        sweeper_1d(param_name='F', param_range=(0.02, 0.07, 0.01), simulator_args={'k': 0.06,'D_u': 0.16,'D_v': 0.08},output_dir="1d_F_sweep")
    (3. Pattern Visualization: The user can observe the change of pattern with the change of paramter, and determine a good range of parameter, thereby go to experiment.        



how users interact with the system to get the information they want

1. Starting the Simulation
Give input parameters, run simulation
2. Viewing and Analyzing Patterns
User can see the pattern in notebook output cells
3. Parameter Sweep and Comparison of Patterns
Users can define a range of parameter values to explore. Then they can see the patterns correlating with parameters.

4. Saving and Exporting Results
User can select the export format for pattern images, parameter sweep.
